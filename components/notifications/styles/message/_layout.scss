@use "sass:map";

$severities: (
  success: (
    bg: $msg-success-bg-color,
    border: $msg-success-border-color,
    color: $msg-success-color,
    icon: $msg-success-icon-color,
    close-icon: $msg-success-close-icon-color,
    hover-bg: $msg-close-icon-hover-bg-color
  ),
  warning: (
    bg: $msg-warning-bg-color,
    border: $msg-warning-border-color,
    color: $msg-warning-color,
    icon: $msg-warning-icon-color,
    close-icon: $msg-warning-close-icon-color,
    hover-bg: $msg-close-icon-hover-bg-color
  ),
  info: (
    bg: $msg-info-bg-color,
    border: $msg-info-border-color,
    color: $msg-info-color,
    icon: $msg-info-icon-color,
    close-icon: $msg-info-close-icon-color,
    hover-bg: $msg-close-icon-hover-bg-color
  ),
  error: (
    bg: $msg-error-bg-color,
    border: $msg-error-border-color,
    color: $msg-error-color,
    icon: $msg-error-icon-color,
    close-icon: $msg-error-close-icon-color,
    hover-bg: $msg-close-icon-hover-bg-color
  )
);
$severities-outlined: (
  success: (
    border: $msg-outline-success-border-color,
    color: $msg-outline-success-color,
    icon: $msg-outline-success-icon-color,
    close-icon: $msg-outline-success-close-icon-color,
    hover-bg: $msg-close-icon-hover-bg-color
  ),
  warning: (
    border: $msg-outline-warning-border-color,
    color: $msg-outline-warning-color,
    icon: $msg-outline-warning-icon-color,
    close-icon: $msg-outline-warning-close-icon-color,
    hover-bg: $msg-close-icon-hover-bg-color
  ),
  info: (
    border: $msg-outline-info-border-color,
    color: $msg-outline-info-color,
    icon: $msg-outline-info-icon-color,
    close-icon: $msg-outline-info-close-icon-color,
    hover-bg: $msg-close-icon-hover-bg-color
  ),
  error: (
    border: $msg-outline-error-border-color,
    color: $msg-outline-error-color,
    icon: $msg-outline-error-icon-color,
    close-icon: $msg-outline-error-close-icon-color,
    hover-bg: $msg-close-icon-hover-bg-color
  )
);
$severities-filled: (
  success: (
    bg: $msg-filled-success-bg-color,
    border: $msg-filled-success-border-color,
    color: $msg-filled-success-color,
    icon: $msg-filled-success-icon-color,
    close-icon: $msg-filled-success-close-icon-color,
    hover-bg: $msg-filled-success-close-icon-hover-bg-color
  ),
  warning: (
    bg: $msg-filled-warning-bg-color,
    border: $msg-filled-warning-border-color,
    color: $msg-filled-warning-color,
    icon: $msg-filled-warning-icon-color,
    close-icon: $msg-filled-warning-close-icon-color,
    hover-bg: $msg-filled-warning-close-icon-hover-bg-color
  ),
  info: (
    bg: $msg-filled-info-bg-color,
    border: $msg-filled-info-border-color,
    color: $msg-filled-info-color,
    icon: $msg-filled-info-icon-color,
    close-icon: $msg-filled-info-close-icon-color,
    hover-bg: $msg-filled-info-close-icon-hover-bg-color
  ),
  error: (
    bg: $msg-filled-error-bg-color,
    border: $msg-filled-error-border-color,
    color: $msg-filled-error-color,
    icon: $msg-filled-error-icon-color,
    close-icon: $msg-filled-error-close-icon-color,
    hover-bg: $msg-filled-error-close-icon-hover-bg-color
  )
);

@mixin severity($border-color, $color, $icon-color, $close-icon-color, $shadow, $ignore) {
  border-color: $border-color;
  color: $color;

  .sf-msg-icon {
    color: $icon-color;
  }

  @if ($ignore !=true) {
    .sf-msg-close-icon {
      color: $close-icon-color;

      &:hover,
      &:focus {
        background-color: $shadow;
        box-shadow: 0 0 0 2px $shadow;
      }
    }
  }
}

@include export-module('message-layout') {
  .sf-message {
    border: 1px solid;
    padding: $msg-padding;
    @include sf-fill($msg-color, $msg-bg-color, null, null, $msg-border-color);
  }

  .sf-msg-icon {
    color: $msg-icon-color;
    margin: $msg-icon-margin;
  }

  .sf-msg-close-icon {
    color: $msg-close-icon-color;
    background: transparent; // Overriding button style
    border-width: 0; // Overriding button style
    margin: $msg-close-icon-margin;
    padding: $msg-close-icon-padding; // Overriding button style
    height: $msg-close-icon-height; // For multi-line text

    &:hover,
    &:focus {
      background-color: $msg-close-icon-hover-bg-color;
      box-shadow: 0 0 0 2px $msg-close-icon-hover-bg-color;
      border-radius: 50%;
    }
  }

  .sf-msg-content {
    padding: $msg-content-padding;
  }

  .sf-message {
    &.sf-rtl {
      .sf-msg-close-icon {
        margin: $msg-rtl-close-icon-margin;
      }
    }

    &.sf-content-right .sf-msg-close-icon,
    &.sf-content-center .sf-msg-close-icon {
      margin: 0 4px;
    }
  }

  @each $type, $props in $severities {
    .sf-msg-#{$type} {
      background-color: map.get($props, bg);
      @include severity(
        map.get($props, border),
        map.get($props, color),
        map.get($props, icon),
        map.get($props, close-icon),
        map.get($props, hover-bg),
        true
      );
    }
  }

  .sf-msg-outlined {
    background: $msg-outline-bg-color;
    border-image: none;

    @include severity(
      $msg-outline-border-color,
      $msg-outline-color,
      $msg-outline-icon-color,
      $msg-outline-close-icon-color,
      $msg-close-icon-hover-bg-color,
      true
    );
  }

  @each $type, $props in $severities-outlined {
    .sf-msg-#{$type}-outlined {
      @include severity(
        map.get($props, border),
        map.get($props, color),
        map.get($props, icon),
        map.get($props, close-icon),
        map.get($props, hover-bg),
        true
      );
    }
  }

  .sf-msg-filled {
    background: $msg-filled-bg-color;
    border-image: none;

    @include severity(
      $msg-filled-border-color,
      $msg-filled-color,
      $msg-filled-icon-color,
      $msg-filled-close-icon-color,
      $msg-filled-close-icon-hover-bg-color,
      false
    );
  }

  @each $type, $props in $severities-filled {
    .sf-msg-#{$type}-filled {
      background-color: map.get($props, bg);
      @include severity(
        map.get($props, border),
        map.get($props, color),
        map.get($props, icon),
        map.get($props, close-icon),
        map.get($props, hover-bg),
        false
      );
    }
  }
}